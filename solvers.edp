macro ststokes() {
    solve stokes([v1,v2,p],[w1,w2,pp]) = 
    int2d(Thf) (2 * mu * tr(eps(v1,v2)) * eps(w1,w2)
        - p * div(w1,w2) - div(v1,v2) * pp - p * pp * 1e-8)
    + on(1, v1 = vb1, v2 = vb2)
    + on(3, v1 = 0, v2 = 0)
    ;
} //EOM
macro stNStokes() {
    ststokes;
    real err;
    for(int ii = 0; ii < 15; ii++){
        solve oseen([dv1,dv2,dp],[w1,w2,pp]) = 
        int2d(Thf) (tr(UgradV(dv1,dv2,v1,v2)) * [w1,w2] + tr(UgradV(v1,v2,dv1,dv2)) * [w1,w2]
            + 2 * mu * tr(eps(dv1,dv2)) * eps(w1,w2) - dp * div(w1,w2) - pp * div(dv1,dv2) - dp * pp * 1e-8)
        + int2d(Thf) (tr(UgradV(v1,v2,v1,v2)) * [w1,w2]
            + 2 * mu * tr(eps(v1,v2)) * eps(w1,w2) - p * div(w1,w2) - pp * div(v1,v2) - p * pp * 1e-8)
        + on(1,3,dv1 = 0, dv2 = 0)
        ;
        v1[] += dv1[];
        v2[] += dv2[];
        p[] += dp[];
        err = sqrt(int2d(Thf) (dv1 * dv1 + dv2 * dv2));
        if (err < 1e-6)
        {
            break;
        }
    }
} //EOM

// real delta = 1.;
macro adjstokes() {
    solve probStokes([phi1,phi2,q],[w1,w2,pp]) =
    int2d(Thf) (2. * mu * tr(eps(phi1,phi2)) * eps(w1,w2)
        - q * div(w1,w2) - div(phi1,phi2) * pp - q * pp * 1e-8)
    + int2d(Thf) (-4. * mu * tr(eps(v1,v2)) * eps(w1,w2))
    + on(1, 3, phi1 = 0, phi2 = 0)
    ;
} //EOM

macro adjns() {
    solve aNStokes([phi1,phi2,q],[w1,w2,pp]) =
    int2d(Thf) (2 * mu * tr(eps(phi1,phi2)) * eps(w1,w2)
        - q * div(w1,w2) - pp * div(phi1,phi2) - q * pp * 1e-8)
    + int2d(Thf) ( tr(UgradV(w1,w2,v1,v2)) * [phi1,phi2])
    + int2d(Thf) ( tr(UgradV(v1,v2,w1,w2)) * [phi1,phi2])
    + int2d(Thf) (-4 * mu * tr(eps(v1,v2)) * eps(w1,w2))
    + on(1, 3, phi1 = 0, phi2 = 0)
    ;
} //EOM

real gamma = 1.;
macro regu() {
    solve reg([tta1,tta2],[eta1,eta2]) = 
    int2d(Thf) (gamma * tr(eps(tta1,tta2)) * eps(eta1,eta2))
    + int1d(Thf,3) ((1. - gamma) * (tr(gradT(tta1)) * gradT(eta1) + tr(gradT(tta2)) * gradT(eta2)))
    + int1d(Thf,3) (dL * dotN(eta1,eta2)) 
    + on(1,2,tta1 = 0, tta2 = 0)
    ;
} //EOM

// macro streamline() {
//     solve stream(psi,khi) =
//         int2d(Thf)( dx(psi)*dx(khi) + dy(psi)*dy(khi))
//         + int2d(Thf)( -khi*(dy(v1)-dx(v2)))
//         + on(3, psi = 0)
//         ;
// } //EOM

macro state() {ststokes; cout<<"end state........"<<endl;} //EOM
macro adjoint() {adjstokes; cout<<"end adjoint........"<<endl;} //EOM

// Advection solver for level set function.
macro Advect() {
    psi = convect([dp1,dp2],-tau1,psi0);
    X = (psi<=0);
} //EOM