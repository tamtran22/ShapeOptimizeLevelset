-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : // Shape optimization of NS flow with level-set method.
    2 : load "isoline"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\isoline = 0)
    3 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    4 : include "macros.edp"macro tr(u) (u')  )   (u') //EOM
    2 : macro div(u1,u2) (dx(u1) + dy(u2))  )   (dx(u1) + dy(u2)) //EOM
    3 : macro grad(f) [dx(f), dy(f)]  )   [dx(f), dy(f)] //EOM
    4 : macro UgradV(u1,u2,v1,v2) [tr([u1,u2]) * grad(v1), tr([u1,u2]) * grad(v2)]  )   [tr([u1,u2]) * grad(v1), tr([u1,u2]) * grad(v2)] //EOM
    5 : macro eps(u1,u2) [dx(u1), (dy(u1) + dx(u2))/2, (dy(u1) + dx(u2))/2, dy(u2)]  )   [dx(u1), (dy(u1) + dx(u2))/2, (dy(u1) + dx(u2))/2, dy(u2)] //EOM
    6 : macro gradT(f) (grad(f) - grad(f)'*[N.x, N.y]*[N.x, N.y])  )   (grad(f) - grad(f)'*[N.x, N.y]*[N.x, N.y]) // EOM 
    7 : macro dotN(v1,v2) (v1 * N.x + v2 * N.y)  )   (v1 * N.x + v2 * N.y) //EOM
    8 : // macro in() (tr([1.,1.]))//EOM
    9 :
   10 : // Energy dissipation functional.
   11 : macro E() (int2d(Thf)(2 * mu * tr(eps(v1,v2)) * eps(v1,v2)))  (int2d(Thf)(2 * mu * tr(eps(v1,v2)) * eps(v1,v2))) //EOM
   12 : // macro dE() (- 2 * mu * tr(eps(v1,v2)) * eps(v1,v2) + 2 * mu * tr(eps(v1,v2)) * eps(w1,w2)) //EOM
   13 : macro dE() (- 2 * mu * tr(eps(v1,v2)) * eps(v1,v2) + 2 * mu * tr(eps(v1,v2)) * eps(phi1,phi2) - tr(UgradV(v1,v2,v1,v2)) * [phi1,phi2])  (- 2 * mu * tr(eps(v1,v2)) * eps(v1,v2) + 2 * mu * tr(eps(v1,v2)) * eps(phi1,phi2) - tr(UgradV(v1,v2,v1,v2)) * [phi1,phi2]) //EOM
   14 :
   15 : // Objective functional.
   16 : macro J() (E)  (E) //EOM
   17 : macro dJ() (dE)  (dE) //EOM
   18 :
   19 : // Constraint.
   20 : macro Vol(Thf) (int2d(Thf)(1.))  )   (int2d(Thf)(1.)) //EOM
   21 : macro dVol() (1.)  (1.) //EOM
   22 : macro Constr(Thf) (Vol(Thf))  )   (Vol(Thf)) //EOM
   23 : macro dCon() (dVol)  (dVol) //EOM
   24 :
   25 : // Lagrange function.
   26 : macro augLagrange() (J/J0 + l * (Constr(Thf) - constrtarget)/Con0 + b/2. * ((Constr(Thf) - constrtarget) ^ 2)/(Con0 ^ 2))  (J/J0 + l * (Constr(Thf) - constrtarget)/Con0 + b/2. * ((Constr(Thf) - constrtarget) ^ 2)/(Con0 ^ 2)) //EOM
           /* Augmented Lagrange function */
   27 : // macro augLagrange() (J + l * (Constr(Thf) - constrtarget) + b/2. * ((Constr(Thf) - constrtarget) ^ 2)) //EOM
 
   28 : macro dAugLagrange() (dJ/J0 + l * dCon/Con0 + b * dCon * (Constr(Thf) - constrtarget)/(Con0 ^ 2))  (dJ/J0 + l *
dCon/Con0 + b * dCon * (Constr(Thf) - constrtarget)/(Con0 ^ 2)) //EOM                                    /* Derivative of the augmented Lagrange function*/
   29 :
   30 : // macro augLagrange() (J + l * (Constr(Thf) - constrtarget) + (b/2.) * ((Constr(Thf) - constrtarget) ^ 2)) //EOM             /* Augmented Lagrange function */
   31 : // macro dAugLagrange() (dJ + l * dCon + b * dCon * (Constr(Thf) - constrtarget)) //EOM
   32 :
   33 : macro comLagrange() (J/J0 + l * (Constr(Thf) - constrtarget)/Con0)  (J/J0 + l * (Constr(Thf) - constrtarget)/Con0) //EOM                          /* Common Lagrange function */
   34 : macro dComLagrange() (dJ/J0 + l * dCon/Con0)  (dJ/J0 + l * dCon/Con0) //EOM
          /* Derivative of common Lagrange */
   35 :
   36 : macro L() (augLagrange)  (augLagrange) //EOM
   37 : macro dL() (dAugLagrange)  (dAugLagrange) //EOM
   38 :
   39 :
   40 : // macro gradDF() (dJ/J0 + l * dCon /Con0 + b * dCon * (Constr(Thf) - constrtarget)/(Con0^2)) //EOM
   41 :
   42 : func real poiseuillex(real xa,real ya,real xb,real yb,real xx,real yy) {
   43 :   real alpha = 1;
   44 :   real ymin = min(ya, yb);
   45 :   real ymax = max(ya, yb);
   46 :   real xmin = min(xa, xb);
   47 :   real xmax = max(xa, xb);
   48 :   real s = (xa-xx)/(xa-xb);
   49 :   //  cout << xmin << endl;
   50 :   return (yy>ymin)*(yy<ymax)*(xx>xmin)*(xx<xmax)*alpha*s*(1-s)*(-(yb-ya));
   51 : }
   52 :
   53 : func real poiseuilley(real xa,real ya,real xb,real yb,real xx,real yy) {
   54 :   real alpha = 1;
   55 :   real ymin = min(ya, yb);
   56 :   real ymax = max(ya, yb);
   57 :   real xmin = min(xa, xb);
   58 :   real xmax = max(xa, xb);
   59 :   real s = (ya-yy)/(ya-yb);
   60 :   return (yy>ymin)*(yy<ymax)*(xx>xmin)*(xx<xmax)*alpha*s*(1-s)*((xb-xa));
   61 : }
    8 # }  {; on(3, v1 = 0, v2 = 0)vb2)v1,v2) * pp - p * pp * 1e-8)
    9 :     solve stokes([v1,v2,p],[w1,w2,pp]) =
   10 :     int2d(Thf) (2 * mu * tr(eps(v1,v2)) * eps(w1,w2)
   11 :         - p * div(w1,w2) - div(v1,v2) * pp - p * pp * 1e-8)
   12 :     + on(1, v1 = vb1, v2 = vb2)
   13 :     + on(3, v1 = 0, v2 = 0)
   14 :     ;
   15 : } //EOM
   36 # }  {}   }   break;1e-6)d(Thf) (dv1 * dv1 + dv2 * dv2));* div(w1,w2) - pp * div(v1,v2) - p * pp * 1e-8) 1e-8)
   37 :     ststokes;
   38 :     real err;
   39 :     for(int ii = 0; ii < 15; ii++){
   40 :         solve oseen([dv1,dv2,dp],[w1,w2,pp]) =
   41 :         int2d(Thf) (tr(UgradV(dv1,dv2,v1,v2)) * [w1,w2] + tr(UgradV(v1,v2,dv1,dv2)) * [w1,w2]
   42 :             + 2 * mu * tr(eps(dv1,dv2)) * eps(w1,w2) - dp * div(w1,w2) - pp * div(dv1,dv2) - dp * pp * 1e-8)
   43 :         + int2d(Thf) (tr(UgradV(v1,v2,v1,v2)) * [w1,w2]
   44 :             + 2 * mu * tr(eps(v1,v2)) * eps(w1,w2) - p * div(w1,w2) - pp * div(v1,v2) - p * pp * 1e-8)
   45 :         + on(1,3,dv1 = 0, dv2 = 0)
   46 :         ;
   47 :         v1[] += dv1[];
   48 :         v2[] += dv2[];
   49 :         p[] += dp[];
   50 :         err = sqrt(int2d(Thf) (dv1 * dv1 + dv2 * dv2));
   51 :         if (err < 1e-6)
   52 :         {
   53 :             break;
   54 :         }
   55 :     }
   56 : } //EOM
   57 :
   58 : // real delta = 1.;
   66 # }  {; on(1, 3, phi1 = 0, phi2 = 0)s(v1,v2)) * eps(w1,w2)) 1e-8)
   67 :     solve probStokes([phi1,phi2,q],[w1,w2,pp]) =
   68 :     int2d(Thf) (2. * mu * tr(eps(phi1,phi2)) * eps(w1,w2)
   69 :         - q * div(w1,w2) - div(phi1,phi2) * pp - q * pp * 1e-8)
   70 :     + int2d(Thf) (-4. * mu * tr(eps(v1,v2)) * eps(w1,w2))
   71 :     + on(1, 3, phi1 = 0, phi2 = 0)
   72 :     ;
   73 : } //EOM
   74 :
   84 # }  {; on(1, 3, phi1 = 0, phi2 = 0)(v1,v2)) * eps(w1,w2))) 1e-8)
   85 :     solve aNStokes([phi1,phi2,q],[w1,w2,pp]) =
   86 :     int2d(Thf) (2 * mu * tr(eps(phi1,phi2)) * eps(w1,w2)
   87 :         - q * div(w1,w2) - pp * div(phi1,phi2) - q * pp * 1e-8)
   88 :     + int2d(Thf) ( tr(UgradV(w1,w2,v1,v2)) * [phi1,phi2])
   89 :     + int2d(Thf) ( tr(UgradV(v1,v2,w1,w2)) * [phi1,phi2])
   90 :     + int2d(Thf) (-4 * mu * tr(eps(v1,v2)) * eps(w1,w2))
   91 :     + on(1, 3, phi1 = 0, phi2 = 0)
   92 :     ;
   93 : } //EOM
   94 :
   95 : real gamma = 1.;
  103 # }  {; on(1,2,tta1 = 0, tta2 = 0)a1,eta2)) dT(tta1)) * gradT(eta1) + tr(gradT(tta2)) * gradT(eta2)))
  104 :     solve reg([tta1,tta2],[eta1,eta2]) =
  105 :     int2d(Thf) (gamma * tr(eps(tta1,tta2)) * eps(eta1,eta2))
  106 :     + int1d(Thf,3) ((1. - gamma) * (tr(gradT(tta1)) * gradT(eta1) + tr(gradT(tta2)) * gradT(eta2)))
  107 :     + int1d(Thf,3) (dL * dotN(eta1,eta2))
  108 :     + on(1,2,tta1 = 0, tta2 = 0)
  109 :     ;
  110 : } //EOM
  111 :
  112 : // macro streamline() {
  113 : //     solve stream(psi,khi) =
  114 : //         int2d(Thf)( dx(psi)*dx(khi) + dy(psi)*dy(khi))
  115 : //         + int2d(Thf)( -khi*(dy(v1)-dx(v2)))
  116 : //         + on(3, psi = 0)
  117 : //         ;
  118 : // } //EOM
  119 :
  120 : macro state() {stNStokes; cout<<"end state........"<<endl;}  {stNStokes; cout<<"end state........"<<endl;} //EOM 
  121 : macro adjoint() {adjns; cout<<"end adjoint........"<<endl;}  {adjns; cout<<"end adjoint........"<<endl;} //EOM
  122 :
  123 : // Advection solver for level set function.
  127 # }  {X = (psi<=0);([dp1,dp2],-tau1,psi0);
  128 :     psi = convect([dp1,dp2],-tau1,psi0);
  129 :     X = (psi<=0);
  130 : } //EOMÿ
    6 : include "distance.edp"// Calculating of distance function.
    2 :
    3 : // Brute force all the wayyyyyyyy.
    4 :
    5 : func real DD(real x1, real y1, real x2, real y2)
 *** Warning  The identifier y1 hide a Global identifier
 
    6 : {
    7 :     return sqrt((x2-x1)^2 + (y2-y1)^2);
    8 : }
    9 :
   10 : func real minD(real xo, real yo, real[int,int] xy, int be1, int be2)
   11 : {
   12 :     real dd = 1e3;
   13 :     for(int i = be1; i< be2; i++)
   14 :     {
   15 :         if (dd > DD(xo,yo,xy(0,i),xy(1,i)))
   16 :         {
   17 :             dd = DD(xo,yo,xy(0,i),xy(1,i));
   18 :         }
   19 :     }
   20 :     return dd;
   21 : }
   22 :
   23 : func real[int] funcD(real[int] cx, real[int] cy, real[int,int] xy, int nx, int be1, int be2)
   24 : {
   25 :     real[int] out(nx);
   26 :     for(int i = 0; i< nx; i++)
   27 :     {
   28 :         out[i] = minD(cx[i],cy[i], xy, be1, be2);
   29 :     }
   30 :     return out;
   31 : }
    7 : ofstream f("data.txt");
    8 :
    9 : // Parameters.
   10 : real l = 1e1;
   11 : real b = 1e-2;
   12 : real btarget = 1e1;
   13 : real alpha = 1.05;
   14 : real mu = 1./200;
   15 : // real minLength = 0.2;
   16 :
   17 : // Initilize the mesh.
   18 : border fr0(t = -0.75, 0.75){x = t; y = -0.5; label = 1;}
   19 : border fr1(t = -0.5, 0.5){x = 0.75; y = t; label = 2;}
   20 : border fr2(t = 0.75, -0.75){x = t; y = 0.5; label = 1;}
   21 : border fr3(t = 0.5, -0.5){x = -0.75; y = t; label = 1;}
   22 : border c(t = 0,2*pi){x = 0.15 * cos(t); y = 0.15 * sin(t); label = 0;}
   23 :
   24 : int n = 3;
   25 : mesh Th = buildmesh (fr0(3 * n) + fr1(10 * n) + fr2(3 * n) + fr3(10 * n) + c(10 * n));
   26 : plot(Th);
   27 : mesh Thf;
   28 : fespace Wh(Th,P1b);
   29 : Wh psi, psi0, psif = 0, khi, dp1, dp2, X, cx = x, cy = y;
   30 : psi = (0.15 - sqrt((x - 0)^2 + (y - 0)^2));
   31 : // psi = (0.1 - min(sqrt((x - 0.15)^2 + (y)^2),sqrt((x + 0.15)^2 + (y)^2)));
   32 : X = (psi<=0);
   33 : // plot(Th, wait = 1);
   34 :
   35 : // Take isoline into boundary curve.
   36 : // Smoothing the beginend array.
   37 : // func int[int] smoothbegin(real[int,int] xy, int[int] be, int nbc)
   38 : // {
   39 : //   int nbe = 0;
   40 : //   for(int i = 0; i < nbc; i++)
   41 : //   {
   42 : //     if (xy(2,be[2*i+1] - 1) > minLength)
   43 : //       nbe += 2;
   44 : //   }
   45 : //   int[int] be1(nbe);
   46 : //   int cbe = 0;
   47 : //   for(int i = 0; i < nbc; i++)
   48 : //   {
   49 : //     if (xy(2,be[2*i+1] - 1) > minLength)
   50 : //     {
   51 : //       be1[cbe] = be[2*i];
   52 : //       be1[cbe+1] = be[2*i+1];
   53 : //       cbe+=2;
   54 : //     }
   55 : //   }
   56 : //   return be1;
   57 : // }
   58 : real err;
   59 : // Regenerating mesh of fluid domain.
   60 : func int genMesh()
   61 : {
   62 :   real iso = 0.;
   63 :   real[int,int] xy(3,1);
   64 :   int[int] be(1);
   65 :   int nbc;
   66 :   nbc = isoline(Th,psi,xy,close=1,iso=iso,beginend=be,smoothing=0.);
   67 :   cout<<"end isoline......"<<endl;
   68 :
   69 :   // Smooth the isoline, only get the curve which shorter than minLength.
   70 :   // int[int] be1 = smoothbegin(xy, be, nbc);
   71 :   // int[int] be1 = be;
   72 :
   73 :   // int nb = 0; // Number of long enough curve.
   74 :   // for(int i = 0; i < nbc; i++)
   75 :   // {
   76 :   //   if (xy(2,be[2*i+1] - 1) > minLength)
   77 :   //     nb++;
   78 :   // }
   79 :
   80 :   border Curve(t = 0,1)
   81 :   {
   82 :     int c = 0;
   83 :       int i0 = be[2*c], i1 = be[2*c+1]-1;
   84 :       P=Curve(xy,i0,i1,t);
   85 :       label=3;
   86 :   }
 *** Warning  The identifier Curve hide a Global identifier
 
   87 :   cout<<"end curve......"<<endl;
   88 :
   89 :   // int[int] nn(nb), nm(nb);
   90 :   int nn, nm;
   91 :   nn = 10 * n;
   92 :   nm = -15 * n;
   93 :
   94 :   Thf = buildmesh (fr0(4 * n) + fr1(5 * n) + fr2(4 * n) + fr3(2 * n) + Curve(nm));
   95 :   // cout<<"Thf........"<<endl;
   96 :   // plot(fr0(4 * n) + fr1(5 * n) + fr2(4 * n) + fr3(2 * n) + Curve(nm), wait = 1);
   97 :   // Th = buildmesh (fr0(4 * n) + fr1(5 * n) + fr2(4 * n) + fr3(2 * n) + Curve(nn));
   98 :   cout<<"end mesh generating......"<<endl;
   99 :   int c = 0;
  100 :   psif[] = funcD(cx[], cy[], xy, cx[].n, be[2*c], be[2*c+1]-1);
  101 :   // plot(psif, dim = 3d, fill = 1, wait = 1);
  102 :   psi = psif * (1 - X) - psif * X;
  103 :   return 0;
  104 : }
  105 :
  106 : genMesh();
  107 : // plot(Thf,wait=1);
  108 :
  109 : // Computing.
  110 : fespace Vhf(Thf,P2);
  111 : fespace Qhf(Thf,P1);
  112 : Vhf v1, v2, phi1, phi2, w1, w2, vb1, vb2, dv1, dv2;
  113 : Qhf p, pp, q, tta1, tta2, eta1, eta2, dp;
  114 : vb1 = 1.;
  115 : vb2 = 0.;
  116 :
  117 : state    {stNStokes
   17 :
   18 :
   19 :
   20 :
   21 :
   22 :
   23 :
   24 :
   25 :
   26 :
   27 :
   28 :
   29 :
   30 :
   31 :
   32 :
   33 :
   34 :
   35 :
   36 :   {
   17 :     ststokes
    2 :
    3 :
    4 :
    5 :
    6 :
    7 :
    8 :   {
    2 :     solve stokes([v1,v2,p],[w1,w2,pp]) =
    3 :     int2d(Thf) (2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]
    4 :         - p * div(w1,w2)     (dx(w1) + dy(w2))  - div(v1,v2)     (dx(v1) + dy(v2))  * pp - p * pp * 1e-8)
    5 :     + on(1, v1 = vb1, v2 = vb2)
    6 :     + on(3, v1 = 0, v2 = 0)
    7 :     ;
    8 : } ;
   18 :     real err;
   19 :     for(int ii = 0; ii < 15; ii++){
   20 :         solve oseen([dv1,dv2,dp],[w1,w2,pp]) =
   21 :         int2d(Thf) (tr(UgradV(dv1,dv2,v1,v2))   (UgradV(dv1,dv2,v1,v2)        [tr([dv1,dv2])   ([dv1,dv2]')  * grad(v1)    [dx(v1), dy(v1)] , tr([dv1,dv2])   ([dv1,dv2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [w1,w2] + tr(UgradV(v1,v2,dv1,dv2))   (UgradV(v1,v2,dv1,dv2)        [tr([v1,v2])   ([v1,v2]')  * grad(dv1)    [dx(dv1), dy(dv1)] , tr([v1,v2])   ([v1,v2]')  * grad(dv2)    [dx(dv2), dy(dv2)] ] ')  * [w1,w2]
   22 :             + 2 * mu * tr(eps(dv1,dv2))   (eps(dv1,dv2)          [dx(dv1), (dy(dv1) + dx(dv2))/2, (dy(dv1) + dx(dv2))/2, dy(dv2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]  - dp * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(dv1,dv2)     (dx(dv1) + dy(dv2))  - dp * pp * 1e-8)
   23 :         + int2d(Thf) (tr(UgradV(v1,v2,v1,v2))   (UgradV(v1,v2,v1,v2)        [tr([v1,v2])   ([v1,v2]')  * grad(v1)    [dx(v1), dy(v1)] , tr([v1,v2])   ([v1,v2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [w1,w2]
   24 :             + 2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2,
dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]  - p * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(v1,v2)     (dx(v1) + dy(v2))  - p * pp * 1e-8)
   25 :         + on(1,3,dv1 = 0, dv2 = 0)
   26 :         ;
   27 :         v1[] += dv1[];
   28 :         v2[] += dv2[];
   29 :         p[] += dp[];
   30 :         err = sqrt(int2d(Thf) (dv1 * dv1 + dv2 * dv2));
   31 :         if (err < 1e-6)
   32 :         {
   33 :             break;
   34 :         }
   35 :     }
   36 : } ; cout<<"end state........"<<endl;} ;
  118 :
  119 : real Con0 = Constr(Thf)   (Vol(Thf)   (int2d(Thf)(1.)) ) ;
  120 : real constrtarget = Con0;
  121 : f<<constrtarget<<endl;
  122 : real J0 = J   (E         (int2d(Thf)(2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] )) ) , J1;
  123 :
  124 : mesh Thf2;
  125 : int jjmax = 1000;
  126 : int iimax = 5;
  127 : int kkmax = 3;
  128 : real errc = 1e-2, meshsize = 0.03;
  129 : int kk, ii, jj;
  130 :
  131 : int n0 = 100;
  132 : real L1,L0,tau1,tau = 1e-3;
  133 :
  134 : for(int j= 0; j<=jjmax+1;j++){
  135 :   cout << "Iter " <<j<<endl;
  136 :   Thf2 = Thf;
  137 :   cout<<"State."<<endl;
  138 :   state    {stNStokes
   17 :
   18 :
   19 :
   20 :
   21 :
   22 :
   23 :
   24 :
   25 :
   26 :
   27 :
   28 :
   29 :
   30 :
   31 :
   32 :
   33 :
   34 :
   35 :
   36 :   {
   17 :     ststokes
    2 :
    3 :
    4 :
    5 :
    6 :
    7 :
    8 :   {
    2 :     solve stokes([v1,v2,p],[w1,w2,pp]) =
    3 :     int2d(Thf) (2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]
    4 :         - p * div(w1,w2)     (dx(w1) + dy(w2))  - div(v1,v2)     (dx(v1) + dy(v2))  * pp - p * pp * 1e-8)
    5 :     + on(1, v1 = vb1, v2 = vb2)
    6 :     + on(3, v1 = 0, v2 = 0)
    7 :     ;
    8 : } ;
   18 :     real err;
   19 :     for(int ii = 0; ii < 15; ii++){
   20 :         solve oseen([dv1,dv2,dp],[w1,w2,pp]) =
   21 :         int2d(Thf) (tr(UgradV(dv1,dv2,v1,v2))   (UgradV(dv1,dv2,v1,v2)        [tr([dv1,dv2])   ([dv1,dv2]')  * grad(v1)    [dx(v1), dy(v1)] , tr([dv1,dv2])   ([dv1,dv2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [w1,w2] + tr(UgradV(v1,v2,dv1,dv2))   (UgradV(v1,v2,dv1,dv2)        [tr([v1,v2])   ([v1,v2]')  * grad(dv1)    [dx(dv1), dy(dv1)] , tr([v1,v2])   ([v1,v2]')  * grad(dv2)    [dx(dv2), dy(dv2)] ] ')  * [w1,w2]
   22 :             + 2 * mu * tr(eps(dv1,dv2))   (eps(dv1,dv2)          [dx(dv1), (dy(dv1) + dx(dv2))/2, (dy(dv1) + dx(dv2))/2, dy(dv2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]  - dp * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(dv1,dv2)     (dx(dv1) + dy(dv2))  - dp * pp * 1e-8)
   23 :         + int2d(Thf) (tr(UgradV(v1,v2,v1,v2))   (UgradV(v1,v2,v1,v2)        [tr([v1,v2])   ([v1,v2]')  * grad(v1)    [dx(v1), dy(v1)] , tr([v1,v2])   ([v1,v2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [w1,w2]
   24 :             + 2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2,
dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]  - p * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(v1,v2)     (dx(v1) + dy(v2))  - p * pp * 1e-8)
   25 :         + on(1,3,dv1 = 0, dv2 = 0)
   26 :         ;
   27 :         v1[] += dv1[];
   28 :         v2[] += dv2[];
   29 :         p[] += dp[];
   30 :         err = sqrt(int2d(Thf) (dv1 * dv1 + dv2 * dv2));
   31 :         if (err < 1e-6)
   32 :         {
   33 :             break;
   34 :         }
   35 :     }
   36 : } ; cout<<"end state........"<<endl;} ;
  139 :   cout<<"Adjoint."<<endl;
  140 :   adjoint    {adjns
   76 :
   77 :
   78 :
   79 :
   80 :
   81 :
   82 :
   83 :
   84 :   {
   76 :     solve aNStokes([phi1,phi2,q],[w1,w2,pp]) =
   77 :     int2d(Thf) (2 * mu * tr(eps(phi1,phi2))   (eps(phi1,phi2)          [dx(phi1), (dy(phi1) + dx(phi2))/2, (dy(phi1) + dx(phi2))/2, dy(phi2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]
   78 :         - q * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(phi1,phi2)     (dx(phi1) + dy(phi2))  - q * pp * 1e-8)
   79 :     + int2d(Thf) ( tr(UgradV(w1,w2,v1,v2))   (UgradV(w1,w2,v1,v2)        [tr([w1,w2])   ([w1,w2]')  * grad(v1)
  [dx(v1), dy(v1)] , tr([w1,w2])   ([w1,w2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [phi1,phi2])
   80 :     + int2d(Thf) ( tr(UgradV(v1,v2,w1,w2))   (UgradV(v1,v2,w1,w2)        [tr([v1,v2])   ([v1,v2]')  * grad(w1)
  [dx(w1), dy(w1)] , tr([v1,v2])   ([v1,v2]')  * grad(w2)    [dx(w2), dy(w2)] ] ')  * [phi1,phi2])
   81 :     + int2d(Thf) (-4 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)] )
   82 :     + on(1, 3, phi1 = 0, phi2 = 0)
   83 :     ;
   84 : } ; cout<<"end adjoint........"<<endl;} ;
  141 :   tau1 = tau;
  142 :   L0 = L   (augLagrange                   (J   (E         (int2d(Thf)(2 * mu * tr(eps(v1,v2))   (eps(v1,v2)
     [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2,
(dy(v1) + dx(v2))/2, dy(v2)] )) ) /J0 + l * (Constr(Thf)   (Vol(Thf)   (int2d(Thf)(1.)) )  - constrtarget)/Con0 + b/2. * ((Constr(Thf)   (Vol(Thf)   (int2d(Thf)(1.)) )  - constrtarget) ^ 2)/(Con0 ^ 2)) ) ;
  143 :   // J0 = J;
  144 :   regu
   97 :
   98 :
   99 :
  100 :
  101 :
  102 :
  103 :   {
   97 :     solve reg([tta1,tta2],[eta1,eta2]) =
   98 :     int2d(Thf) (gamma * tr(eps(tta1,tta2))   (eps(tta1,tta2)          [dx(tta1), (dy(tta1) + dx(tta2))/2, (dy(tta1) + dx(tta2))/2, dy(tta2)] ')  * eps(eta1,eta2)          [dx(eta1), (dy(eta1) + dx(eta2))/2, (dy(eta1) + dx(eta2))/2,
dy(eta2)] )
   99 :     + int1d(Thf,3) ((1. - gamma) * (tr(gradT(tta1))   (gradT(tta1)       (grad(tta1)    [dx(tta1), dy(tta1)]  -
grad(tta1)    [dx(tta1), dy(tta1)] '*[N.x, N.y]*[N.x, N.y]) ')  * gradT(eta1)       (grad(eta1)    [dx(eta1), dy(eta1)]
 - grad(eta1)    [dx(eta1), dy(eta1)] '*[N.x, N.y]*[N.x, N.y])  + tr(gradT(tta2))   (gradT(tta2)       (grad(tta2)    [dx(tta2), dy(tta2)]  - grad(tta2)    [dx(tta2), dy(tta2)] '*[N.x, N.y]*[N.x, N.y]) ')  * gradT(eta2)       (grad(eta2)
 [dx(eta2), dy(eta2)]  - grad(eta2)    [dx(eta2), dy(eta2)] '*[N.x, N.y]*[N.x, N.y]) ))
  100 :     + int1d(Thf,3) (dL   (dAugLagrange                 (dJ   (dE                      (- 2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)]  + 2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(phi1,phi2)          [dx(phi1), (dy(phi1) + dx(phi2))/2, (dy(phi1) + dx(phi2))/2, dy(phi2)]  - tr(UgradV(v1,v2,v1,v2))   (UgradV(v1,v2,v1,v2)        [tr([v1,v2])   ([v1,v2]')  * grad(v1)    [dx(v1), dy(v1)] , tr([v1,v2])   ([v1,v2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [phi1,phi2]) ) /J0 + l * dCon   (dVol
(1.) ) /Con0 + b * dCon   (dVol   (1.) )  * (Constr(Thf)   (Vol(Thf)   (int2d(Thf)(1.)) )  - constrtarget)/(Con0 ^ 2)) )  * dotN(eta1,eta2)         (eta1 * N.x + eta2 * N.y) )
  101 :     + on(1,2,tta1 = 0, tta2 = 0)
  102 :     ;
  103 : } ;
  145 :   // plot([v1,v2]);
  146 :   // dp1 = -dx(psi) * dL/(sqrt(dx(psi)^2 + dy(psi)^2) + 1e-8);
  147 :   // dp2 = -dy(psi) * dL/(sqrt(dx(psi)^2 + dy(psi)^2) + 1e-8);
  148 :   dp1 = tta1;
  149 :   dp2 = tta2;
  150 :   // tta1 = tta1 * (1-X);
  151 :   // tta2 = tta2 * (1-X);
  152 :   // plot([tta1,tta2]);
  153 :   psi0 = psi;
  154 :   for(int i = 0; i<=iimax; i++){
  155 :     // Choose dt so L<L0.
  156 :     // psi0 = psi;
  157 :     cout<<"Levelset advection."<<endl;
  158 :     Advect
  125 :
  126 :
  127 :   {
  125 :     psi = convect([dp1,dp2],-tau1,psi0);
  126 :     X = (psi<=0);
  127 : } ;
  159 :     // plot(psi,dim=3d,wait=1);
  160 :     genMesh();
  161 :     // Thf = adaptmesh(Thf, hmax = meshsize, hmin = meshsize/sqrt(2), ratio = 1.5);
  162 :     cout<<"Test state."<<endl;
  163 :     state    {stNStokes
   17 :
   18 :
   19 :
   20 :
   21 :
   22 :
   23 :
   24 :
   25 :
   26 :
   27 :
   28 :
   29 :
   30 :
   31 :
   32 :
   33 :
   34 :
   35 :
   36 :   {
   17 :     ststokes
    2 :
    3 :
    4 :
    5 :
    6 :
    7 :
    8 :   {
    2 :     solve stokes([v1,v2,p],[w1,w2,pp]) =
    3 :     int2d(Thf) (2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]
    4 :         - p * div(w1,w2)     (dx(w1) + dy(w2))  - div(v1,v2)     (dx(v1) + dy(v2))  * pp - p * pp * 1e-8)
    5 :     + on(1, v1 = vb1, v2 = vb2)
    6 :     + on(3, v1 = 0, v2 = 0)
    7 :     ;
    8 : } ;
   18 :     real err;
   19 :     for(int ii = 0; ii < 15; ii++){
   20 :         solve oseen([dv1,dv2,dp],[w1,w2,pp]) =
   21 :         int2d(Thf) (tr(UgradV(dv1,dv2,v1,v2))   (UgradV(dv1,dv2,v1,v2)        [tr([dv1,dv2])   ([dv1,dv2]')  * grad(v1)    [dx(v1), dy(v1)] , tr([dv1,dv2])   ([dv1,dv2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [w1,w2] + tr(UgradV(v1,v2,dv1,dv2))   (UgradV(v1,v2,dv1,dv2)        [tr([v1,v2])   ([v1,v2]')  * grad(dv1)    [dx(dv1), dy(dv1)] , tr([v1,v2])   ([v1,v2]')  * grad(dv2)    [dx(dv2), dy(dv2)] ] ')  * [w1,w2]
   22 :             + 2 * mu * tr(eps(dv1,dv2))   (eps(dv1,dv2)          [dx(dv1), (dy(dv1) + dx(dv2))/2, (dy(dv1) + dx(dv2))/2, dy(dv2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]  - dp * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(dv1,dv2)     (dx(dv1) + dy(dv2))  - dp * pp * 1e-8)
   23 :         + int2d(Thf) (tr(UgradV(v1,v2,v1,v2))   (UgradV(v1,v2,v1,v2)        [tr([v1,v2])   ([v1,v2]')  * grad(v1)    [dx(v1), dy(v1)] , tr([v1,v2])   ([v1,v2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [w1,w2]
   24 :             + 2 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2,
dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]  - p * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(v1,v2)     (dx(v1) + dy(v2))  - p * pp * 1e-8)
   25 :         + on(1,3,dv1 = 0, dv2 = 0)
   26 :         ;
   27 :         v1[] += dv1[];
   28 :         v2[] += dv2[];
   29 :         p[] += dp[];
   30 :         err = sqrt(int2d(Thf) (dv1 * dv1 + dv2 * dv2));
   31 :         if (err < 1e-6)
   32 :         {
   33 :             break;
   34 :         }
   35 :     }
   36 : } ; cout<<"end state........"<<endl;} ;
  164 :     cout<<"Test adjoint."<<endl;
  165 :     adjoint    {adjns
   76 :
   77 :
   78 :
   79 :
   80 :
   81 :
   82 :
   83 :
   84 :   {
   76 :     solve aNStokes([phi1,phi2,q],[w1,w2,pp]) =
   77 :     int2d(Thf) (2 * mu * tr(eps(phi1,phi2))   (eps(phi1,phi2)          [dx(phi1), (dy(phi1) + dx(phi2))/2, (dy(phi1) + dx(phi2))/2, dy(phi2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)]
   78 :         - q * div(w1,w2)     (dx(w1) + dy(w2))  - pp * div(phi1,phi2)     (dx(phi1) + dy(phi2))  - q * pp * 1e-8)
   79 :     + int2d(Thf) ( tr(UgradV(w1,w2,v1,v2))   (UgradV(w1,w2,v1,v2)        [tr([w1,w2])   ([w1,w2]')  * grad(v1)
  [dx(v1), dy(v1)] , tr([w1,w2])   ([w1,w2]')  * grad(v2)    [dx(v2), dy(v2)] ] ')  * [phi1,phi2])
   80 :     + int2d(Thf) ( tr(UgradV(v1,v2,w1,w2))   (UgradV(v1,v2,w1,w2)        [tr([v1,v2])   ([v1,v2]')  * grad(w1)
  [dx(w1), dy(w1)] , tr([v1,v2])   ([v1,v2]')  * grad(w2)    [dx(w2), dy(w2)] ] ')  * [phi1,phi2])
   81 :     + int2d(Thf) (-4 * mu * tr(eps(v1,v2))   (eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(w1,w2)          [dx(w1), (dy(w1) + dx(w2))/2, (dy(w1) + dx(w2))/2, dy(w2)] )
   82 :     + on(1, 3, phi1 = 0, phi2 = 0)
   83 :     ;
   84 : } ; cout<<"end adjoint........"<<endl;} ;
  166 :     L1 = L   (augLagrange                   (J   (E         (int2d(Thf)(2 * mu * tr(eps(v1,v2))   (eps(v1,v2)
       [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] ')  * eps(v1,v2)          [dx(v1), (dy(v1) + dx(v2))/2, (dy(v1) + dx(v2))/2, dy(v2)] )) ) /J0 + l * (Constr(Thf)   (Vol(Thf)   (int2d(Thf)(1.)) )  - constrtarget)/Con0 + b/2. * ((Constr(Thf)   (Vol(Thf)   (int2d(Thf)(1.)) )  - constrtarget) ^ 2)/(Con0 ^ 2)) ) ;
  167 :     // J1 = J;
  168 :     cout<<"getting L......"<<endl;
  169 :     if (L1<L0)
  170 :       break;
  171 :     else
  172 :     {
  173 :       tau1*=0.5;
  174 :       // psi = psi0; //really???
  175 :       // continue;
  176 :     }
  177 :     if (i == iimax) {
  178 :       Thf = Thf2;
  179 :       psi = psi0;
  180 :     }
  181 :   }
  182 :   plot(Thf);
  183 :   // err = sqrt(int2d(Th)(dp1 * dp1 + dp2 * dp2));
  184 :   // plot(psi,fill =1);
  185 :   // f<<j<<" "<<J<<" "<<L0<<" "<<Constr(Thf)<<" "<<l<<" "<<err<<endl;
  186 :   // if (j%10==0)
  187 :   // {
  188 :   //   savesol("Th." + string(j) + ".sol", Th, psi);
  189 :   //   savemesh(Thf,"Th." + string(j) + ".mesh");
  190 :   // }
  191 :
  192 :   l = l + b * (Constr(Thf)   (Vol(Thf)   (int2d(Thf)(1.)) )  - constrtarget)/Con0;
  193 :   if (j < n0)
  194 :     b*=alpha;
  195 : } sizestack + 1024 =41904  ( 40880 )
 
  --  mesh:  Nb of Triangles =   1308, Nb of Vertices 694
 -- isoline close=1 iso= 0 1e-010
    bound  isovalue :-0.751388 0.15
end isoline......
end curve......
  --  mesh:  Nb of Triangles =    816, Nb of Vertices 453
end mesh generating......
  -- Solve :
          min 4.27455e-034  max 1.8324
          min -0.467544  max 0.467859
          min -0.0611946  max 0.271887
  -- Solve :
          min -0.853277  max 0.743421
          min -0.545891  max 0.539805
          min -0.976287  max 0.890921
  -- Solve :
          min -0.243186  max 0.19105
          min -0.115569  max 0.116206
          min -0.10085  max 0.35547
  -- Solve :
          min -0.0563514  max 0.0280158
          min -0.0188776  max 0.0189835
          min -0.00556208  max 0.0354125
  -- Solve :
          min -0.00113947  max 0.00148349
          min -0.000645013  max 0.00060794
          min -0.000997701  max 0.000128525
  -- Solve :
          min -1.91142e-006  max 9.8687e-007
          min -4.25816e-007  max 5.29933e-007
          min -3.20188e-008  max 7.3396e-007
end state........
Iter 0
State.
  -- Solve :
          min 4.27455e-034  max 1.8324
          min -0.467544  max 0.467859
          min -0.0611946  max 0.271887
  -- Solve :
          min -0.853277  max 0.743421
          min -0.545891  max 0.539805
          min -0.976287  max 0.890921
  -- Solve :
          min -0.243186  max 0.19105
          min -0.115569  max 0.116206
          min -0.10085  max 0.35547
  -- Solve :
          min -0.0563514  max 0.0280158
          min -0.0188776  max 0.0189835
          min -0.00556208  max 0.0354125
  -- Solve :
          min -0.00113947  max 0.00148349
          min -0.000645013  max 0.00060794
          min -0.000997701  max 0.000128525
  -- Solve :
          min -1.91142e-006  max 9.8687e-007
          min -4.25816e-007  max 5.29933e-007
          min -3.20188e-008  max 7.3396e-007
end state........
Adjoint.
  -- Solve :
          min -0.978351  max 0.784573
          min -0.560908  max 0.566179
          min -1.49478  max 0.409503
end adjoint........
 kk 2 3 :   -- Solve :
          min -2.7913  max 2.84173
          min -6.25941  max 6.1738
Levelset advection.
 -- isoline close=1 iso= 0 1e-010
    bound  isovalue :-0.751534 0.146907
end isoline......
end curve......
  --  mesh:  Nb of Triangles =    826, Nb of Vertices 458
end mesh generating......
 try getConsole D:\freefem++\shape_opt_levelset_genMesh\main.edp
